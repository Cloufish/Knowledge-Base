{"componentChunkName":"component---node-modules-gatsby-theme-garden-src-templates-local-file-js","path":"/Old-Posts/2021-06-13-Making-Rules-For-IPTables-Firewall-With-UFW","result":{"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Making Rules For IPtables Firewall with UFW\",\n  \"date\": \"2021-06-13 06:46:00 +0100\",\n  \"categories\": [\"DevSecOps\", \"Firewall\"],\n  \"tags\": [\"devsecops\", \"firewall\", \"iptables\", \"ufw\"],\n  \"lang\": \"en\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"why-ufw\"\n  }, \"Why UFW?\"), mdx(\"p\", null, \"There are at least two (That's how many I know) ways to configure iptables rules:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"By \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"iptables\"), \" command itself\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"By \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ufw\"), \" - \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Uncomplicated Firewall\"), \" - which is also a commands tool, but it simplifies is a lot.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Instead of running iptables command with flags; e.g. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"iptables -A INPUT\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-s <IP> -j ACCEPT\"), \", we are simply typing combination of keywords such as \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"sudo ufw allow from <IP> to any\"), \". Which is way more understandable.\")))), mdx(\"h2\", {\n    \"id\": \"setting-it-up\"\n  }, \"Setting it up:\"), mdx(\"h3\", {\n    \"id\": \"installing\"\n  }, \"Installing\"), mdx(\"p\", null, \"With\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"sudo apt-get install ufw\"), \" - Debian\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"sudo pacman -Syu ufw\"), \" - Arch Linux\")), mdx(\"h3\", {\n    \"id\": \"enabling-the-ufw-service\"\n  }, \"Enabling the ufw service.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"systemctl enable ufw\"), \" - If you're using systemd - most of you're using it by default.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ufw enable\"), \" - will make ufw active\")), mdx(\"h3\", {\n    \"id\": \"most-used-commands-in-ufw\"\n  }, \"Most used commands in UFW\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sudo ufw status\"), \" - Gives us basic firewall rules. In the beginning you'll see that the output is simply \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Status: active\")), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://imgur.com/3rKrNHk.png\",\n    \"alt\": \"status\"\n  })), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sudo ufw status numbered\"), \" - Will provide us with a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"numbered list\"), \". While deleting the rules, we can refer to these numbers, instead of retyping the whole rule with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sudo ufw delete rule 5\"), \" - this is pretty handy I'd say!\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"IMPORTANT: \"), \" It should be mentioned that these rules are interpreted one by one. So if the 2nd rule denies all traffic for all the network e.g. from IPs 192.168.1.0/24, and then 3rd rule accepts traffic from the ip 192.168.1.2. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Then the host 192.168.1.2 WILL STILL BE BLOCKED\"))), mdx(\"h3\", {\n    \"id\": \"resetting-ufw\"\n  }, \"Resetting UFW\"), mdx(\"p\", null, \"If anything goes wrong, or you want to revert any changes to defaults, you can do that.\\nBut before, it is a good practice to disable UFW, so that deleting \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ALLOW\"), \" rules won't block our way with ssh connection\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sudo ufw disable\"), \"\\nand then:\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sudo ufw reset\")), mdx(\"h3\", {\n    \"id\": \"configuring-ufw-policies\"\n  }, \"Configuring UFW Policies\"), mdx(\"p\", null, \"Configuring Uncomplicated Firewall Policies is done through config file!\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nano /etc/default/ufw\"), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"The default policy of ufw is to DENY EVERYTHING\"), \" - which is definitely a good policy. We shouldn't change that, instead we should remember to  \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"not have ufw enabled, while configuring ufw.\"), \". So make sure you execute \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sudo ufw disable\"), \" before proceeding to more strict rule-making.\"), mdx(\"h3\", {\n    \"id\": \"the-basics-of-rule-making-with-ufw\"\n  }, \"The basics of Rule-Making with UFW\"), mdx(\"p\", null, \"We do it via Command Line Interface (CLI).\"), mdx(\"p\", null, \"The basic syntax is\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sudo ufw (allow | deny) (<protocol_name> | from <ip_address> | <port_number>)\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"|\"), \" in parenthesis means that we can choose between these options and combine them!. Here're examples that would make it easier for you to understand:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"sudo ufw allow ssh\"), \" - Would allow incoming traffic to the port of ssh (which is 22 by default) - But you can also provide a port number instead of protocol name\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"sudo ufw allow ssh\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"sudo ufw allow from 1.2.3.4 to any port 22\"), \" - \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"So we can combine these parameters\"), \". Here we say that we allow communication from the stated-ip to \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"any\"), \" other ip on port 22\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"sudo ufw allow from 1.2.3.4 to 4.3.2.1 port 22\"), \" - would result limit the destination ip to only \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"4.3.2.1\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"1.2.3.4\"), \" on port 22\", mdx(\"blockquote\", {\n    parentName: \"li\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"When configuring access through an ip-address - \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"MAKE SURE IT IS STATIC, AND NOT DHCP\"), \" - Meaning that It won't change after one week. If it did, then ufw would block your connection to the server \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"until\"), \" you change your IP again to the one you've set rule for.\")))), mdx(\"p\", null, \"You might ask yourself - \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"What If I want in\")), mdx(\"h3\", {\n    \"id\": \"other-options-for-ufw\"\n  }, \"Other options for ufw\"), mdx(\"h4\", {\n    \"id\": \"limit\"\n  }, \"limit\"), mdx(\"p\", null, \"Provide you with one of the solution to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"mitigate DoS\"), \" attacks.\"), mdx(\"p\", null, \"The \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"limit\"), \" option will limit the connections - \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"by default\"), \" it's \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"6 connections in the span of 30 seconds\"), \"\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sudo ufw limit 80/tcp\"), \" - Will act as we discussed above - It limit the http connection to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"6 per 30 seconds.\")), mdx(\"h4\", {\n    \"id\": \"reject-vs-deny\"\n  }, \"reject vs deny\"), mdx(\"p\", null, \"The main difference is that when doing reject, We're \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"informing the host that the connection got rejected\"), \". When in the case of deny, we're simply ignoring it.\\n| reject                               | deny                                                       |\\n| ----------------------------------- | ---------------------------------------------------------- |\\n| we inform that connection is blocked | we don't inform that connection is blocked; we just ignore |\\n|                                      |                                                            |\"), mdx(\"h4\", {\n    \"id\": \"reload\"\n  }, \"reload\"), mdx(\"p\", null, \"You might ask yourself - \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Why do we need reload option, if all of the rules apply immediately\"), \" (if ufw is enabled).\"), mdx(\"p\", null, \"Yes, they're, but the reload option is mostly used when we have performed changes to the configuration. When we have changed for example the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DEFAULT_INPUT_POLICY= \"), \" or have disabled IPv6 support with setting up \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IPv6=no\"), \". Then it is just one command to reload this configuration, instead of two.\"), mdx(\"h4\", {\n    \"id\": \"allow-out-and-allow-in\"\n  }, \"Allow Out and Allow In\"), mdx(\"p\", null, \"You might want to separate incoming and outgoing rules.\\nYou can do that with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"allow out\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"allow in\"), \"\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ufw allow in on eth0 from 192.168.0.3\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ufw deny out on eth0 from 192.168.0.3\")), mdx(\"h4\", {\n    \"id\": \"reading-logs-of-ufw\"\n  }, \"Reading logs of UFW\"), mdx(\"p\", null, \"First we should make sure that logging is enabled, by\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sudo ufw logging on\"), \"\\nI think, that the easiest way to see them is to read it from the kernel buffer with:\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sudo dmesg | grep '\\\\[UFW]'\")), mdx(\"p\", null, \"But these logs \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"could be also\"), \" in folder \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/var/log\"), \", in files starting with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ufw*\"), \" - You can list those sudo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ls /var/log/ufw*\"), \".\"), mdx(\"h4\", {\n    \"id\": \"other-addons-for-iptables\"\n  }, \"Other Addons for iptables\"), mdx(\"p\", null, \"Remember, that ufw is made to work well with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"iptables\"), \" rules. And \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"was designed to make rules in iptables easier\"), \". We could say, that ufw is an addon to iptables\"), mdx(\"p\", null, \"And likewise, there're other addons to iptables like:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://www.cipherdyne.com/fwsnort/\"\n  }, \"fwsnort\"), \" - That is the implementation of IDS/IPS for iptables\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://www.cipherdyne.com/psad/\"\n  }, \"psad\"), \" - For Intrusion Detection, and better Log Analysis with iptables\")), mdx(\"h2\", {\n    \"id\": \"sure-it-wont-build-rules-for-you-dynamically-but-its-a-great-start-to-learn-these-addons---knowledge-is-power-and-youll-need-to-acquire-it-anyway\"\n  }, \"Sure, it won't build rules for you dynamically, \", mdx(\"strong\", {\n    parentName: \"h2\"\n  }, \"but it's a great start to learn these addons\"), \" - Knowledge is power and you'll need to acquire it anyway.\"));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[],"inboundReferences":[{"__typename":"Mdx","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Old Posts From Previous Blog\",\n  \"tags\": \"moc, permanent-note\",\n  \"references\": null\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"old-posts-from-previous-blog\"\n  }, \"Old Posts From Previous Blog\"), mdx(\"h2\", {\n    \"id\": \"blogging\"\n  }, \"Blogging\"), mdx(\"p\", null, \"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Why-You-Should-Start-Your-Own-Blog\",\n    \"title\": \"Why You Should Start Your Own Blog\"\n  }, \"[[Why You Should Start Your Own Blog]]\"), \"\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/How-to-Create-Your-Own-Blog-With-Jekyll\",\n    \"title\": \"How to Create Your Own Blog With Jekyll\"\n  }, \"[[How to Create Your Own Blog With Jekyll]]\"), \"\"), mdx(\"h2\", {\n    \"id\": \"blackarch\"\n  }, \"Blackarch\"), mdx(\"p\", null, \"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/2021-01-27-blackarch-zsh-en\",\n    \"title\": \"2021-01-27-blackarch-zsh-en\"\n  }, \"[[2021-01-27-blackarch-zsh-en]]\"), \"\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/2021-05-30-blackarch-has-its-own-official-image.md\",\n    \"title\": \"2021-05-30-blackarch-has-its-own-official-image.md\"\n  }, \"[[2021-05-30-blackarch-has-its-own-official-image.md]]\"), \"\"), mdx(\"h2\", {\n    \"id\": \"note-taking\"\n  }, \"Note-Taking\"), mdx(\"p\", null, \"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/2021-06-12-How-To-Take-Better-Notes\",\n    \"title\": \"2021-06-12-How-To-Take-Better-Notes\"\n  }, \"[[2021-06-12-How-To-Take-Better-Notes]]\"), \"\"), mdx(\"h2\", {\n    \"id\": \"others\"\n  }, \"Others:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/2020-12-07-is-this-blog-dead-en\",\n    \"title\": \"2020-12-07-is-this-blog-dead-en\"\n  }, \"[[2020-12-07-is-this-blog-dead-en]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/2021-02-12-creating-your-own-docker-pentesting-container\",\n    \"title\": \"2021-02-12-creating-your-own-docker-pentesting-container\"\n  }, \"[[2021-02-12-creating-your-own-docker-pentesting-container]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/2021-03-02-Preparing-your-PHYSICAL-android-device-for-bug-bounty-part-1\",\n    \"title\": \"2021-03-02-Preparing-your-PHYSICAL-android-device-for-bug-bounty-part-1\"\n  }, \"[[2021-03-02-Preparing-your-PHYSICAL-android-device-for-bug-bounty-part-1]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/2021-03-02-Why-should-you-root-your-own-android-device\",\n    \"title\": \"2021-03-02-Why-should-you-root-your-own-android-device\"\n  }, \"[[2021-03-02-Why-should-you-root-your-own-android-device]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/2021-03-21-OWASP-ZAP-as-a-great-fuzzing-tool\",\n    \"title\": \"2021-03-21-OWASP-ZAP-as-a-great-fuzzing-tool\"\n  }, \"[[2021-03-21-OWASP-ZAP-as-a-great-fuzzing-tool]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/2021-03-28-Can-OWASP-ZAP-replace-Burp-Suite-Professional\",\n    \"title\": \"2021-03-28-Can-OWASP-ZAP-replace-Burp-Suite-Professional?\"\n  }, \"[[2021-03-28-Can-OWASP-ZAP-replace-Burp-Suite-Professional?]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/2021-04-05-Learning-on-how-to-build-a-modern-webapp\",\n    \"title\": \"2021-04-05-Learning-on-how-to-build-a-modern-webapp\"\n  }, \"[[2021-04-05-Learning-on-how-to-build-a-modern-webapp]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/2021-04-12-Setting-up-zap-scan-in-cicd-pipeline\",\n    \"title\": \"2021-04-12-Setting-up-zap-scan-in-cicd-pipeline\"\n  }, \"[[2021-04-12-Setting-up-zap-scan-in-cicd-pipeline]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/2021-04-19-Setting-Up-Hashicorp-Vault-To-Manage-Github-Token\",\n    \"title\": \"2021-04-19-Setting-Up-Hashicorp-Vault-To-Manage-Github-Token\"\n  }, \"[[2021-04-19-Setting-Up-Hashicorp-Vault-To-Manage-Github-Token]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/2021-04-26-Preventing-Insufficient-Logging-and-Monitoring\",\n    \"title\": \"2021-04-26-Preventing-Insufficient-Logging-and-Monitoring\"\n  }, \"[[2021-04-26-Preventing-Insufficient-Logging-and-Monitoring]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/2021-05-03-Basics-Of-Kubernetes\",\n    \"title\": \"2021-05-03-Basics-Of-Kubernetes\"\n  }, \"[[2021-05-03-Basics-Of-Kubernetes]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/2021-05-10-Kubernetes-Basics-Hands-On\",\n    \"title\": \"2021-05-10-Kubernetes-Basics-Hands-On\"\n  }, \"[[2021-05-10-Kubernetes-Basics-Hands-On]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/2021-05-17-Security-Of-Docker-Containers\",\n    \"title\": \"2021-05-17-Security-Of-Docker-Containers\"\n  }, \"[[2021-05-17-Security-Of-Docker-Containers]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/2021-05-24-Kubernetes-Basics-Hands-On-Part-2\",\n    \"title\": \"2021-05-24-Kubernetes-Basics-Hands-On-Part-2\"\n  }, \"[[2021-05-24-Kubernetes-Basics-Hands-On-Part-2]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/2021-06-13-Making-Rules-For-IPTables-Firewall-With-UFW\",\n    \"title\": \"2021-06-13-Making-Rules-For-IPTables-Firewall-With-UFW\"\n  }, \"[[2021-06-13-Making-Rules-For-IPTables-Firewall-With-UFW]]\"), \"\")));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"1e197c1d-7688-55e9-8881-78b0077a5007","fields":{"slug":"/Old Posts From Previous Blog","title":"Old Posts From Previous Blog"}}}]},"fields":{"slug":"/Old-Posts/2021-06-13-Making-Rules-For-IPTables-Firewall-With-UFW","title":"2021-06-13-Making-Rules-For-IPTables-Firewall-With-UFW"}}},"pageContext":{"id":"afa5c4a2-98e2-51eb-98a3-81330b3a81ad"}},"staticQueryHashes":["2098632890","2221750479","2468095761"]}